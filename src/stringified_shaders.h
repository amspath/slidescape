// This file is automatically generated at runtime.
#pragma once

const char stringified_shader_source__basic_vert[] = 
	"#version 330 core\n"
	"\n"
	"layout (location = 0) in vec3 pos;\n"
	"layout (location = 1) in vec2 tex_coord;\n"
	"\n"
	"out VS_OUT {\n"
	"    vec2 tex_coord;\n"
	"} vs_out;\n"
	"\n"
	"uniform mat4 model_matrix;\n"
	"uniform mat4 projection_view_matrix;\n"
	"\n"
	"void main() {\n"
	"    gl_Position = projection_view_matrix * model_matrix * vec4(pos.xyz, 1.0f);\n"
	"    vs_out.tex_coord = tex_coord;\n"
	"}\n";

const char stringified_shader_source__basic_frag[] = 
	"#version 330 core\n"
	"\n"
	"in VS_OUT {\n"
	"    vec2 tex_coord;\n"
	"} fs_in;\n"
	"\n"
	"uniform vec3 bg_color;\n"
	"uniform sampler2D the_texture;\n"
	"uniform float black_level;\n"
	"uniform float white_level;\n"
	"uniform vec3 transparent_color;\n"
	"uniform float transparent_tolerance;\n"
	"uniform bool use_transparent_filter;\n"
	"uniform bool draw_outlines;\n"
	"\n"
	"out vec4 fragColor;\n"
	"\n"
	"void main() {\n"
	"    vec4 the_texture_rgba = texture(the_texture, fs_in.tex_coord);\n"
	"\n"
	"    float opacity = the_texture_rgba.a;\n"
	"    vec3 color = the_texture_rgba.rgb;\n"
	"\n"
	"    if (use_transparent_filter) {\n"
	"        vec3 difference = transparent_color - color;\n"
	"        float diff_sq = dot(difference, difference);\n"
	"        if (diff_sq < transparent_tolerance) {\n"
	"            float t = diff_sq / transparent_tolerance;\n"
	"            t = max(0, t * 1.2f - 0.2f);\n"
	"            opacity = t;\n"
	"        }\n"
	"    }\n"
	"    color = (color - black_level) * (1.0f / (white_level - black_level));\n"
	"\n"
	"    if (draw_outlines && (fs_in.tex_coord.x < 0.01f || fs_in.tex_coord.x > 0.99f || fs_in.tex_coord.y < 0.01f || fs_in.tex_coord.y > 0.99f)) {\n"
	"        fragColor = vec4(1, 0, 0, 1);\n"
	"    } else {\n"
	"        fragColor = vec4(opacity * color + (1.0f-opacity) * bg_color, opacity);\n"
	"    }\n"
	"\n"
	"}\n";

const char stringified_shader_source__finalblit_vert[] = 
	"#version 330 core\n"
	"\n"
	"layout (location = 0) in vec2 pos;\n"
	"layout (location = 1) in vec2 tex_coord;\n"
	"\n"
	"out VS_OUT {\n"
	"    vec2 tex_coord;\n"
	"} vs_out;\n"
	"\n"
	"void main() {\n"
	"    gl_Position = vec4(pos.xy, 0.0f, 1.0f);\n"
	"    vs_out.tex_coord = tex_coord;\n"
	"}\n";

const char stringified_shader_source__finalblit_frag[] = 
	"#version 330 core\n"
	"\n"
	"in VS_OUT {\n"
	"    vec2 tex_coord;\n"
	"} fs_in;\n"
	"\n"
	"uniform sampler2D texture0;\n"
	"uniform sampler2D texture1;\n"
	"uniform float t;\n"
	"\n"
	"out vec4 fragColor;\n"
	"\n"
	"void main() {\n"
	"    vec4 p0 = texture(texture0, fs_in.tex_coord);\n"
	"    vec4 p1 = texture(texture1, fs_in.tex_coord);\n"
	"    float alpha = p0.a * p1.a;\n"
	"    float t_final = t * p1.a;\n"
	"    fragColor = vec4((1.0f-t_final) * p0.rgb + t_final * p1.rgb, alpha);\n"
	"}\n";

const char* stringified_shader_sources[4] = {
	stringified_shader_source__basic_vert,
	stringified_shader_source__basic_frag,
	stringified_shader_source__finalblit_vert,
	stringified_shader_source__finalblit_frag,
};

const char* stringified_shader_source_names[4] = {
	"basic_vert",
	"basic_frag",
	"finalblit_vert",
	"finalblit_frag",
};

